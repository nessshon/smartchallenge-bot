from abc import abstractmethod, ABCMeta

from aiogram.types import (
    InlineKeyboardButton,
    SwitchInlineQueryChosenChat,
    LoginUrl,
    WebAppInfo,
)
from aiogram.utils.markdown import hide_link


class Text(metaclass=ABCMeta):

    def __init__(self, language_code: str) -> None:
        self.language_code = language_code if language_code == "ru" else "en"

    @property
    @abstractmethod
    def data(self) -> dict:
        raise NotImplementedError

    def get(self, code: str) -> str:
        return self.data[self.language_code][code]


class TextMessage(Text):

    @property
    def data(self) -> dict:
        return {
            "ru": {
                "select_language": (
                    "üëã <b>–ü—Ä–∏–≤–µ—Ç</b>, {full_name}!\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"
                ),
                "change_language": (
                    "<b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:</b>\n\n"
                ),
                "send_nickname": (
                    "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º</b>,\n\n"
                    "–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤–º–µ—Å—Ç–µ —Å –≤–∞—à–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:"
                ),
                "send_github_username": (
                    "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å GitHub</b>,\n\n"
                    "–∫–æ—Ç–æ—Ä—É—é –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ Smart Challenge. "
                    "–ü–æ–º–Ω–∏—Ç–µ, –≤–æ–∑—Ä–∞—Å—Ç —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 –º–µ—Å—è—Ü–∞. (–§–æ—Ä–º–∞—Ç: @username)"
                ),
                "send_codeforces_username": (
                    "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä Codeforces</b>,\n\n"
                    "–µ—Å–ª–∏ –æ–Ω —É –≤–∞—Å –µ—Å—Ç—å. –ò–Ω–∞—á–µ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
                ),
                "main_menu": (
                        hide_link("https://telegra.ph//file/3ba499a5ad6e33f73527c.jpg") +
                        "üèÜ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TON Smart Challenge #5</b>\n\n"
                        "üöÄ {full_name}, –º—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –Ω–∞ TON Smart Challenge!\n"
                        "ü§ñ –¶–µ–ª—å —ç—Ç–æ–≥–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏.\n"
                        "üíª –ì–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤ –∏ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?\n"
                ),
                "my_profile": (
                    "üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                    "<b>–ü—Å–µ–≤–¥–æ–Ω–∏–º:</b>\n"
                    "{nickname}\n"
                    "<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub:</b>\n"
                    "{github_username}\n"
                    "<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Codeforces:</b>\n"
                    "{codeforces_username}\n"
                    "<b>–¢–æ–∫–µ–Ω GitHub:</b>\n"
                    "{github_token}\n"
                    "<b>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:</b>\n"
                    "{wallet_address}"
                ),
                "func_resources": (
                    "üìô <b>–†–µ—Å—É—Ä—Å—ã FunC</b>\n\n"
                    "–Ø–∑—ã–∫ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è FunC –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ TON."
                ),
                "tact_resources": (
                    "üìò <b>–†–µ—Å—É—Ä—Å—ã Tact</b>\n\n"
                    "Tact ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –±–ª–æ–∫—á–µ–π–Ω–∞ TON"
                    "–æ–Ω –ø—Ä–æ—Å—Ç –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏, –∏–º–µ–µ—Ç –∑–Ω–∞–∫–æ–º—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ —Å—Ç—Ä–æ–≥—É—é —Å–∏—Å—Ç–µ–º—É —Ç–∏–ø–æ–≤,"
                    "–≥–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ —Å–æ—Å—Ç–∞–≤ –±–µ–∑–Ω–∞–∫–ª–∞–¥–Ω–æ–≥–æ —Ç–∏–ø–∞,"
                    "—á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –ø–∏—Å–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"
                    "—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ."
                )
            },
            "en": {
                "select_language": (
                    "üëã <b>Hello</b>, {full_name}!\n\n"
                    "Select language:"
                ),
                "change_language": (
                    "<b>Select language:</b>\n\n"
                ),
                "send_nickname": (
                    "<b>Send your nickname</b>,\n\n"
                    "that will be published along with your results:"
                ),
                "send_github_username": (
                    "<b>Send your GitHub account</b>\n\n"
                    "that you'll use for Smart Challenge submissions. "
                    "Remember, the account should be at least 1 month old. (Format: @username)"
                ),
                "send_codeforces_username": (
                    "<b>Send your Codeforces Handle</b>\n\n"
                    "if you have one. Else, press Skip."
                ),
                "main_menu": (
                        hide_link("https://telegra.ph//file/3ba499a5ad6e33f73527c.jpg") +
                        "üèÜ <b>Welcome to TON Smart Challenge #5</b>\n\n"
                        "üöÄ {full_name}, we're absolutely thrilled to have you on board for TON Smart Challenge!\n"
                        "ü§ñ This exciting contest is all about pushing your skills to the limit.\n"
                        "üíª Ready to jump into the challenge and showcase your coding skills?\n"
                ),
                "my_profile": (
                    "üë§ <b>My profile</b>\n\n"
                    "<b>Nickname:</b>\n"
                    "{nickname}\n"
                    "<b>GitHub username:</b>\n"
                    "{github_username}\n"
                    "<b>Codeforces username:</b>\n"
                    "{codeforces_username}\n"
                    "<b>GitHub Token:</b>\n"
                    "{github_token}\n"
                    "<b>Wallet address:</b>\n"
                    "{wallet_address}"
                ),
                "func_resources": (
                    "üìô <b>FunC resources</b>\n\n"
                    "A high-level language FunC is used to program smart contracts on TON."
                ),
                "tact_resources": (
                    "üìò <b>Tact resources</b>\n\n"
                    "Tact is a new programming language for TON blockchain smart contracts "
                    "that is easy to use and has a familiar syntax, strong type system, "
                    "gas control, and zero-overhead type composition, "
                    "which enables developers to write complex smart contract systems "
                    "with verified execution costs."
                )
            }
        }


class TextButton(Text):

    @property
    def data(self) -> dict:
        return {
            "ru": {
                "back": "‚Äπ –ù–∞–∑–∞–¥",
                "skip": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚Ä∫",
                "my_profile": "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
                "leaderboard": "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤",
                "func_resources": "üìô FunC —Ä–µ—Å—É—Ä—Å—ã",
                "tact_resources": "üìò Tact —Ä–µ—Å—É—Ä—Å—ã",

                "connect_wallet": "üü¢ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫",
                "disconnect_wallet": "üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫",
                "update_profile": "üìù –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                "regenerate_github_token": "üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω GitHub",

                "tact_documentation": "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Tact",
                "tact_examples": "üêæ –¢–∞–∫—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏",
                "tact_community_chat": "üë• –ß–∞—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Tact",

                "func_documentation": "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è FunC",
                "func_cookbook": "üë®‚Äçüç≥ –ü–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ FunC",

                "ton_course": "üíé –ö—É—Ä—Å TON Blockchain",
                "ton_dev_chat": "üë• –ß–∞—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ TON",
            },
            "en": {
                "back": "‚Äπ Back",
                "skip": "Skip ‚Ä∫",
                "my_profile": "üë§ My profile",
                "leaderboard": "üèÜ Leaderboard",
                "func_resources": "üìô FunC resources",
                "tact_resources": "üìò Tact resources",

                "connect_wallet": "üü¢ Connect wallet",
                "disconnect_wallet": "üî¥ Disconnect wallet",
                "update_profile": "üìù Update profile",
                "regenerate_github_token": "üîÑ Generate GitHub token",

                "tact_documentation": "üìö Tact documentation",
                "tact_examples": "üêæ Tact by example",
                "tact_community_chat": "üë• Tact Developers chat",

                "func_documentation": "üìö FunC documentation",
                "func_cookbook": "üë®‚Äçüç≥ FunC cookbook",

                "ton_course": "üíé TON Blockchain course",
                "ton_dev_chat": "üë• TON Developers chat",
            }
        }

    def get_button(
            self,
            code: str,
            url: str | None = None,
            web_app: WebAppInfo | None = None,
            login_url: LoginUrl | None = None,
            switch_inline_query: str | None = None,
            switch_inline_query_current_chat: str | None = None,
            switch_inline_query_chosen_chat: SwitchInlineQueryChosenChat | None = None,
    ) -> InlineKeyboardButton:
        text = self.get(code)
        if url:
            return InlineKeyboardButton(text=text, url=url)
        elif web_app:
            return InlineKeyboardButton(text=text, web_app=web_app)
        elif login_url:
            return InlineKeyboardButton(text=text, login_url=login_url)
        elif switch_inline_query:
            return InlineKeyboardButton(text=text, switch_inline_query=switch_inline_query)
        elif switch_inline_query_current_chat:
            return InlineKeyboardButton(text=text, switch_inline_query_current_chat=switch_inline_query_current_chat)
        elif switch_inline_query_chosen_chat:
            return InlineKeyboardButton(text=text, switch_inline_query_chosen_chat=switch_inline_query_chosen_chat)
        return InlineKeyboardButton(text=text, callback_data=code)
